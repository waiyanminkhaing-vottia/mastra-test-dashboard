name: Deploy Mastra Test Dashboard

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH for deployment
        run: |
          echo "Setting up SSH connection..."

          # Hardcoded connection details
          LIGHTSAIL_HOST="test.dev-maestra.vottia.me"
          LIGHTSAIL_USER="ec2-user"

          echo "Host: $LIGHTSAIL_HOST"
          echo "User: $LIGHTSAIL_USER"

          # Export for later steps
          echo "LIGHTSAIL_HOST=$LIGHTSAIL_HOST" >> $GITHUB_ENV
          echo "LIGHTSAIL_USER=$LIGHTSAIL_USER" >> $GITHUB_ENV

          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add host to known_hosts and test connection
          ssh-keyscan -H $LIGHTSAIL_HOST >> ~/.ssh/known_hosts
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $LIGHTSAIL_USER@$LIGHTSAIL_HOST "echo 'SSH connection successful'"

      - name: Build and push Docker image
        run: |
          # Create a temporary script for the remote build
          cat << 'SCRIPT_EOF' > build_script.sh
          #!/bin/bash
          set -e

          echo "üèóÔ∏è Building Docker image on Lightsail instance..."

          # Ensure git is available
          if command -v git >/dev/null 2>&1; then
            GIT_CMD="git"
          elif [ -x /usr/bin/git ]; then
            GIT_CMD="/usr/bin/git"
          else
            echo "Installing git..."
            sudo dnf install -y git
            GIT_CMD="git"
          fi
          echo "‚úÖ Using git: $GIT_CMD"

          # Clean up old mastra-test-dashboard images (keep latest 3)
          sudo docker images localhost:5000/mastra-test-dashboard --format "{{.ID}} {{.CreatedAt}}" | sort -k2 -r | tail -n +4 | awk '{print $1}' | xargs -r sudo docker rmi || true

          # Clone/update repository with authentication
          BRANCH="${{ github.ref_name }}"
          echo "Deploying from branch: $BRANCH"

          # Configure git with token authentication
          echo "Configuring git authentication..."
          $GIT_CMD config --global credential.helper store
          echo "https://oauth2:$GITHUB_TOKEN@github.com" > ~/.git-credentials

          if [ -d "/tmp/mastra-test-dashboard" ]; then
            cd /tmp/mastra-test-dashboard
            $GIT_CMD fetch https://oauth2:$GITHUB_TOKEN@github.com/waiyanminkhaing-vottia/mastra-test-dashboard.git
            $GIT_CMD checkout $BRANCH
            $GIT_CMD pull https://oauth2:$GITHUB_TOKEN@github.com/waiyanminkhaing-vottia/mastra-test-dashboard.git $BRANCH
          else
            cd /tmp
            $GIT_CMD clone -b $BRANCH https://oauth2:$GITHUB_TOKEN@github.com/waiyanminkhaing-vottia/mastra-test-dashboard.git
            cd mastra-test-dashboard
          fi

          # Clean up credentials
          rm -f ~/.git-credentials

          # Set environment file based on manual input
          ENV_FILE="${{ github.event.inputs.environment }}"
          echo "Using environment: $ENV_FILE"

          # Copy environment file to deployment location
          sudo mkdir -p /opt/mastra-test-dashboard
          sudo cp ".env.$ENV_FILE" "/opt/mastra-test-dashboard/.env.$ENV_FILE"

          # Build and push image
          echo "Building Docker image..."
          echo "$GITHUB_TOKEN" > /tmp/github_token

          # Setup buildx builder with docker-container driver for advanced caching
          sudo docker buildx create --name multiarch --driver docker-container --use 2>/dev/null || \
          sudo docker buildx use multiarch 2>/dev/null || true

          sudo docker buildx build \
            --secret id=github_token,src=/tmp/github_token \
            --cache-from type=registry,ref=localhost:5000/mastra-test-dashboard:buildcache \
            --cache-to type=registry,ref=localhost:5000/mastra-test-dashboard:buildcache,mode=max \
            -t localhost:5000/mastra-test-dashboard:$ENV_FILE-latest \
            --push \
            .
          rm -f /tmp/github_token

          # Security scan with Trivy
          echo "üîç Running security scan..."
          if command -v trivy >/dev/null 2>&1; then
            trivy image --exit-code 0 --no-progress --format table localhost:5000/mastra-test-dashboard:$ENV_FILE-latest
          else
            echo "‚ö†Ô∏è Trivy not installed, skipping security scan"
          fi

          echo "‚úÖ Image built and pushed: localhost:5000/mastra-test-dashboard:$ENV_FILE-latest"
          SCRIPT_EOF

          # Copy script to remote and execute
          scp build_script.sh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }}:/tmp/
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} \
            "chmod +x /tmp/build_script.sh && export GITHUB_TOKEN='${{ secrets.GITHUB_TOKEN }}' && /tmp/build_script.sh"

      - name: Deploy application container
        run: |
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
            echo "üöÄ Deploying Mastra Test Dashboard..."

            # Ensure Docker network exists
            sudo docker network create mastra-test-network --driver bridge 2>/dev/null || true

            # Store current image for rollback
            CURRENT_IMAGE=$(sudo docker inspect mastra-test-dashboard --format='{{.Image}}' 2>/dev/null || echo "none")
            echo "Current image: $CURRENT_IMAGE"

            # Stop and remove existing container
            sudo docker stop mastra-test-dashboard 2>/dev/null || true
            sudo docker rm mastra-test-dashboard 2>/dev/null || true

            # Set environment file based on manual input
            ENV_FILE="${{ github.event.inputs.environment }}"
            echo "Deploying with environment: $ENV_FILE"

            # Deploy new container with environment file
            sudo docker run -d \
              --name mastra-test-dashboard \
              --network mastra-test-network \
              --restart unless-stopped \
              -p 3000:3000 \
              --env-file "/opt/mastra-test-dashboard/.env.$ENV_FILE" \
              -e NODE_ENV=production \
              -e DATABASE_URL="postgresql://${{ vars.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres-pgvector:5432/${{ vars.POSTGRES_DB }}" \
              -e NEXT_TELEMETRY_DISABLED=1 \
              localhost:5000/mastra-test-dashboard:$ENV_FILE-latest

            # Clean up old images (keep running container image)
            sudo docker images localhost:5000/mastra-test-dashboard --format "{{.ID}} {{.CreatedAt}}" | sort -k2 -r | tail -n +3 | awk '{print $1}' | xargs -r sudo docker rmi || true

            echo "‚úÖ Application deployed successfully"
          EOF

      - name: Verify deployment
        run: |
          ssh ${{ env.LIGHTSAIL_USER }}@${{ env.LIGHTSAIL_HOST }} << 'EOF'
            echo "üîç Verifying deployment..."

            echo "Checking container status..."
            sudo docker ps | grep mastra-test-dashboard

            echo "Checking container logs..."
            sudo docker logs mastra-test-dashboard --tail=20

            echo "Waiting for application to be ready..."
            HEALTH_CHECK_PASSED=false
            for i in {1..30}; do
              if curl -sf http://localhost:3000/api/health >/dev/null 2>&1; then
                echo "‚úÖ Application health check passed"
                HEALTH_CHECK_PASSED=true
                break
              else
                echo "‚è≥ Waiting for application... ($i/30)"
                sleep 2
              fi
            done

            # Rollback if health check failed
            if [ "$HEALTH_CHECK_PASSED" = "false" ]; then
              echo "‚ùå Health check failed. Rolling back..."
              sudo docker stop mastra-test-dashboard 2>/dev/null || true
              sudo docker rm mastra-test-dashboard 2>/dev/null || true

              if [ "$CURRENT_IMAGE" != "none" ]; then
                echo "üîÑ Restoring previous container..."
                sudo docker run -d \
                  --name mastra-test-dashboard \
                  --network mastra-test-network \
                  --restart unless-stopped \
                  -p 3000:3000 \
                  --env-file "/opt/mastra-test-dashboard/.env.$ENV_FILE" \
                  -e NODE_ENV=production \
                  -e DATABASE_URL="postgresql://${{ vars.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres-pgvector:5432/${{ vars.POSTGRES_DB }}" \
                  -e NEXT_TELEMETRY_DISABLED=1 \
                  $CURRENT_IMAGE
                echo "üîÑ Rollback completed"
              fi
              exit 1
            fi

            echo "‚úÖ Deployment verification completed successfully"
          EOF
